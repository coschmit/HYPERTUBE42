'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var $ = require('cheerio');

var Parser = function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }

  _createClass(Parser, null, [{
    key: 'getTableData',
    value: function getTableData(html) {
      var search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var data = {};
      var parsedData = [];

      data.results = parsedData;

      var rows = search === true ? $('table.data>tbody>#torrent_latest_torrents', html) : $('table.data>tbody>#torrent__torrents', html);

      if (rows.length > 0) {
        Object.keys(rows).forEach(function (key) {
          // eslint-disable-next-line no-restricted-globals
          if (!isNaN(parseInt(key, 10))) parsedData.push(Parser.getRowData(rows, key));
        });
      }

      data.total_results = parsedData.length;
      var currentPage = $('.active', html);

      data.page = currentPage.length > 0 ? currentPage[0].childNodes[0].data : 1;
      return data;
    }
  }, {
    key: 'getRowData',
    value: function getRowData(rows, row) {
      var rowData = {};
      var links = $('a', rows[row]);
      rowData['torrent magnet link'] = links[1].attribs.href;
      rowData['Download magnet link'] = links[2].attribs.href;
      rowData.page_link = links[3].attribs.href;
      var title = $('.cellMainLink', rows[row]);
      rowData.title = title[0].children[0].data;
      rowData.posted_in = links[6] === undefined ? '' : links[6].attribs.href;

      var commentCount = $('.icommentjs', rows[row]);
      rowData.comments = commentCount[0].children[0].data;

      var verifed = $('.ka-green', rows[row]);
      rowData.verifed = verifed.length > 0;

      var links2 = $('.font11px,.lightgrey,.block ', rows[row]);
      var postedBy = '';
      if (links2[0] === undefined) {
        postedBy = '';
      } else if (links2[0].childNodes.length === 5) {
        var arr = links2[0].childNodes[2].data.match(/\S+/g)[0];
        postedBy = arr;
      } else if (links2[0].childNodes.length === 3) {
        var _arr = links2[0].childNodes[0].data.match(/\S+/g)[2];
        postedBy = _arr;
      }

      rowData.posted_by = postedBy;

      var verifiedUploader = $('.ka-verify', rows[row]);
      rowData.verified_uploader = verifiedUploader.length > 0;

      var rightData = $('.center  ', rows[row]);
      rowData.size = rightData[1].children[0].data;
      rowData.time = rightData[2].children[0].data;
      rowData.seeders = rightData[3].children[0].data;
      rowData.leeches = rightData[4].children[0].data === 'N/A' ? 'N/A' : rightData[4].children[0].data.split('\n')[1];

      return rowData;
    }
  }]);

  return Parser;
}();

module.exports.getParsedData = Parser.getTableData;