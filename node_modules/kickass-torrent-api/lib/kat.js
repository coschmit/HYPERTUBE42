'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var qStringfy = require('query-string');
var parser = require('./parser');
var rp = require('./index');

var kickass = function () {
  function kickass() {
    _classCallCheck(this, kickass);
  }

  _createClass(kickass, null, [{
    key: 'getCategories',
    value: function getCategories() {
      return kickass.Categories;
    }
  }, {
    key: 'getOptions',
    value: function getOptions() {
      return kickass.Options;
    }

    // https://kat2.biz/usearch/westworld%20category:tv/?field=leechers&sorder=asc
    // https://kat2.biz/usearch/westworld%20category:tv/2/?field=leechers&sorder=asc

  }, {
    key: 'advanceSearch',
    value: function advanceSearch(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var uri = void 0;
      var query = void 0;
      var innerCategory = void 0;
      var category = 'usearch';
      var parsedElement = element.replace(' ', '%20');
      if (options !== undefined) {
        var page = options.page === undefined ? 1 : options.page;
        innerCategory = options.category === undefined ? undefined : options.category;

        if (options.field !== undefined) {
          var parameters = {
            field: options.field,
            sorder: options.order === undefined ? 'desc' : options.order
          };
          query = qStringfy.stringify(parameters);
        }

        uri = kickass.baseURL + category + '/' + parsedElement + '%20';

        if (innerCategory !== undefined) uri += 'category:' + innerCategory;

        uri += '/' + page;

        if (query !== undefined) uri += '?' + query;
      } else uri = kickass.baseURL + category + '/' + parsedElement;

      var parsedData = void 0;
      return new Promise(function (resolve, reject) {
        kickass.getRequest(uri).then(function (html) {
          parsedData = parser.getParsedData(html, true);
          parsedData.category = category;
          resolve(parsedData);
        }).catch(function (error) {
          reject(error);
        });
      });
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getMovies',
    value: function getMovies() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Movies;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getTvTorrents',
    value: function getTvTorrents() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.TV;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getGames',
    value: function getGames() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.GAMES;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getMusic',
    value: function getMusic() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.MUSIC;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getLatest',
    value: function getLatest() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Latest;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getApps',
    value: function getApps() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Apps;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getXXX',
    value: function getXXX() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.XXX;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getBooks',
    value: function getBooks() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Books;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getOthers',
    value: function getOthers() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Other;
      return kickass.sendRequest(category, options);
    }

    /**
     * @param Field - kickass.options.kickass.Options.Fields.?
     * @param Order - kickass.options.kickass.Options.Order.?
     * @param page - any number
     */

  }, {
    key: 'getTop100',
    value: function getTop100() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

      var category = kickass.Categories.Top100;
      return kickass.sendRequest(category, options);
    }
  }, {
    key: 'sendRequest',
    value: function sendRequest(category) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var url = void 0;
      if (options !== undefined) {
        var page = options.page === undefined ? 1 : options.page;
        var parameters = void 0;

        if (options.field !== undefined) {
          parameters = {
            field: options.field,
            sorder: options.order === undefined ? 'desc' : options.order
          };
          var query = qStringfy.stringify(parameters);
          url = kickass.baseURL + category + '/' + page + '?' + query;
        } else {
          url = kickass.baseURL + category + '/' + page;
        }
      } else url = kickass.baseURL + category + '/';

      return new Promise(function (resolve, reject) {
        kickass.getRequest(url).then(function (html) {
          var parsedData = parser.getParsedData(html);
          parsedData.category = category;
          resolve(parsedData);
        }).catch(function (error) {
          reject(error);
        });
      });
    }
  }, {
    key: 'getRequest',
    value: function getRequest(url) {
      return rp.default(url);
    }
  }]);

  return kickass;
}();

kickass.Categories = {
  Movies: 'movies',
  TV: 'tv',
  GAMES: 'games',
  MUSIC: 'music',
  Latest: 'new',
  Apps: 'applications',
  XXX: 'xxx',
  Books: 'books',
  Other: 'other',
  Top100: 'top100'
};

kickass.Options = {
  Fields: {
    Size: 'size',
    Age: 'time_add',
    Seed: 'seeders',
    Leech: 'leechers'
  },
  Order: {
    Ascending: 'asc',
    Descending: 'desc'
  }
};

kickass.baseURL = 'https://kat2.biz/';

// https://kat2.biz/usearch/westworld%20category:tv/2/?field=leechers&sorder=asc

// eslint-disable-next-line no-console
kickass.advanceSearch('westworld').then();

module.exports.baseURL = kickass.baseURL;
module.exports.Categories = kickass.Categories;
module.exports.Options = kickass.Options;
module.exports.getOptions = kickass.getOptions;
module.exports.getCategories = kickass.getCategories;
module.exports.getMovies = kickass.getMovies;
module.exports.getTvTorrents = kickass.getTvTorrents;
module.exports.getGames = kickass.getGames;
module.exports.getMusic = kickass.getMusic;
module.exports.getLatest = kickass.getLatest;
module.exports.getApps = kickass.getApps;
module.exports.getXXX = kickass.getXXX;
module.exports.getBooks = kickass.getBooks;
module.exports.getOthers = kickass.getOthers;
module.exports.getTop100 = kickass.getTop100;
module.exports.advanceSearch = kickass.advanceSearch;